from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher import FSMContext
from keyboards.inline.main_inline import *
from keyboards.inline.menu_button import *
from utils.db_api import database as commands
from loader import dp, bot
from utils.db_api.database import *
import datetime
from aiogram.types import ReplyKeyboardRemove
from geopy.geocoders import Nominatim
from aiogram.types import InlineQuery, \
    InputTextMessageContent, InlineQueryResultPhoto, InputMediaPhoto, InlineQueryResultArticle
import re 

from smsaero import SmsAero


SMSAERO_EMAIL = 'berk.2023@bk.ru'
SMSAERO_API_KEY = 'BRkXPMR_20Dvu6DIqU8nzF9dGjCFNPN8'

def generateOTP():
    return random.randint(111111, 999999)

def isValid(s):
    Pattern = re.compile("(0|91)?[7-9][0-9]{9}")
    return Pattern.match(s)

def send_sms(phone: int, message: str) -> dict:
    api = SmsAero(SMSAERO_EMAIL, SMSAERO_API_KEY)
    return api.send(phone, message)

@dp.callback_query_handler(lambda call: call.data.startswith("confirm---"), state='*')
async def confirm_pay(call: types.CallbackQuery, state: FSMContext):
    data = call.data
    order_id = data.split('---')[1]
    order = await get_order(order_id)
    order_details = await get_order_details(order_id)
    markup = await time_keyboard(order.id)
    await call.message.edit_reply_markup(reply_markup=markup)
    text = f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: <b>#{order.user.user_id}</b>\n\nüìç –ê–¥—Ä–µ—Å: {order.address}\n"
    for order_detail in order_details:
        text += f"  {order_detail.product.name}‚úñÔ∏è{order_detail.count}\n"
    await bot.send_message(chat_id=-810383073, text=text)


@dp.callback_query_handler(lambda call: call.data.startswith("cancel---"), state='*')
async def confirm_pay(call: types.CallbackQuery, state: FSMContext):
    data = call.data
    await call.message.edit_reply_markup(reply_markup=None)
    order_id = data.split('---')[1]
    order = get_order(order_id)
    await bot.send_message(chat_id=order.user.user_id, text="–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚ùå")


@dp.callback_query_handler(lambda call: call.data.startswith("delivered_confirm"), state='*')
async def confirm_pay(call: types.CallbackQuery, state: FSMContext):
    data = call.data
    await call.message.edit_reply_markup(reply_markup=None)
    order_id = data.split('---')[1]
    order = await get_order(order_id)
    markup = await rate_keyboard(order_id)
    await bot.send_message(chat_id=order.user.user_id, text="–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏", reply_markup=markup)


@dp.callback_query_handler(lambda call: call.data.startswith("order_rate"), state='*')
async def confirm_pay(call: types.CallbackQuery, state: FSMContext):
    data = call.data
    await call.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É.", reply_markup=None)
    order_id = data.split('-')[1]
    order = await get_order(order_id)
    lang = await get_lang(call.from_user.id)
    markup = await user_menu(lang)
    await bot.send_message(chat_id=call.from_user.id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=markup)


@dp.callback_query_handler(lambda call: call.data.startswith("order_time"), state='*')
async def confirm_pay(call: types.CallbackQuery, state: FSMContext):
    data = call.data
    order_id = data.split('-')[1]
    time = data.split('-')[2]
    order = await get_order(order_id)
    if order.service_type != "pick":
        order_details = await get_order_details(order_id)
        await call.message.edit_reply_markup(reply_markup=None)
        text = f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: <b>+{order.user.phone}</b>\n\nüìç –ê–¥—Ä–µ—Å: {order.address}\n"
        for order_detail in order_details:
            text += f"  {order_detail.product.name}‚úñÔ∏è{order_detail.count}\n"
        markup = await delivered(order.id)    
        await bot.send_message(chat_id=-853613647, text=text, reply_markup=markup)
    await bot.send_message(chat_id=order.user.user_id, text=f"–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ.\n–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ {time} –º–∏–Ω—É—Ç")

 
@dp.message_handler(lambda message: message.text in ["üè† Asosiy menyu", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üè† Ana men√º"], state='*')
async def go_home(message: types.Message, state: FSMContext):
    lang = await get_lang(message.from_user.id)
    markup = await user_menu(lang)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=markup)
    await state.set_state("get_command")
 

@dp.message_handler(CommandStart(), state='*')
async def bot_start(message: types.Message, state: FSMContext):
    await add_user(user_id=message.from_user.id, name=message.from_user.first_name, lang="ru")
    user = await get_user(message.from_id)
    if user is not None and user.phone:
        lang = await get_lang(message.from_user.id)
        markup = await user_menu(lang)
        await message.answer("–ü—Ä–∏–≤–µ—Ç –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Big Sushi Premium. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=markup)
        await state.set_state("get_command")
    else:
        markup =await language_keyboard()
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Big Sushi Premium. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7YYYxxxxxxx")
        await state.set_state("get_phone")


@dp.message_handler(state="get_phone")
async def get_language(message: types.Message, state: FSMContext):
    phone = message.text
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        markup =await language_keyboard()
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Big Sushi Premium. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7YYYxxxxxxx")
        await state.set_state("get_phone")
    else:
        if isValid(phone):
            user = await get_user(message.from_user.id)
            user.check_phone = phone
            otp = generateOTP()
            user.otp = otp
            user.save()
            await state.update_data(otp=otp)
            # send_sms(phone=int(user.check_phone), message = f"–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è Big Sushi Premium: {otp}")
            markup = await back_keyboard()
            await message.answer("–í–≤–µ–¥–∏—Ç–µ SMS-–∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üëá", reply_markup=markup)
            await state.set_state("get_phone_cod")
        else:
            markup =await language_keyboard()
            await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7YYYxxxxxxx")
            await state.set_state("get_phone")
            

@dp.message_handler(lambda message: message.text in ["‚¨ÖÔ∏èÔ∏è –ù–∞–∑–∞–¥"], state="get_phone_cod")
async def get_language(message: types.Message, state: FSMContext):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Big Sushi Premium. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7YYYxxxxxxx")
    await state.set_state("get_phone")



@dp.message_handler(lambda message: message.text not in ["‚¨ÖÔ∏èÔ∏è –ù–∞–∑–∞–¥"], state="get_phone_cod")
async def get_language(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if message.text == user.otp:
        user.phone = user.check_phone
        user.save()
        lang = await get_lang(message.from_user.id)
        markup = await user_menu(lang)
        await message.answer("–ü—Ä–∏–≤–µ—Ç –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Big Sushi Premium. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=markup)
        await state.set_state("get_command")
    else:
        await message.answer("‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            

@dp.message_handler(lambda message: message.text in ["üõç –ó–∞–∫–∞–∑–∞—Ç—å", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ÑπÔ∏è –û –Ω–∞—Å", "‚úçÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "üì•  –ö–æ—Ä–∑–∏–Ω–∞",  "üóÇ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"], state="get_command")
async def get_user_command(message: types.Message, state: FSMContext):
    lang = await get_lang(message.from_user.id)
    command = message.text
    if command in ["‚úçÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"]:
        lang = await get_lang(message.from_user.id)
        markup = await back_keyboard(lang)
        if lang == "uz":
            await message.answer("üñã O'z fikr-mulohaza, shikoyat yoki takliflaringizni yozing. Yoki ovozli, video yoki foto xabar yuboring", reply_markup=markup)
        elif lang == "en":
            await message.answer("üñã Write your feedback, complaint or wish. Or send a voice, video or photo message", reply_markup=markup)
        elif lang == "ru":
            await message.answer("üñã –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤, –∂–∞–ª–æ–±—É –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=markup)
        await state.set_state("get_feedback")      
    elif command in ["üõç –ó–∞–∫–∞–∑–∞—Ç—å"]:
        photo = open('./MAIN.jpg', 'rb')
        markup = await category_keyboard(user_id=message.from_id)
        await message.answer_photo(photo=photo, caption="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá",  reply_markup=markup)
        await state.set_state("get_category")
    elif command in ["üì•  –ö–æ—Ä–∑–∏–Ω–∞"]:
        text = await get_carts(message.from_user.id)
        if text != "‚ö†Ô∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞":
            markup = await cart_keyboard(user_id=message.from_user.id)
            await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup, parse_mode='HTML')
        else:
            go_m = await go_order()
            markup = await back_keyboard()
            await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)
            await bot.send_message(chat_id=message.from_user.id, text="–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏", reply_markup=go_m)
        await state.set_state("get_cart_command")

        await state.set_state("get_cart_command")
    elif command in ["üóÇ Buyurtmalar tarixi", "üóÇ Order history", "üóÇ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"]:
        summa = 0
        orders = await get_orders(message.from_id)
        markup = await user_menu(lang)
        if lang =="ru":
            text = "<b>üõí–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤</b>\n\n"  
        for order in orders: 
         
            order_details = await get_order_details(order.id)      
            if lang == "ru":
                text += f"<b>üõí –ó–∞–∫–∞–∑</b>\n\nüÜî –ó–∞–∫–∞–∑: <b>#{order.id}</b>\n"\
                f"üïô –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order.date.year}-{order.date.month}-{order.date.day}  {order.date.hour}:{order.date.minute}\nüìç –ê–¥—Ä–µ—Å: {order.address}\n"
                for order_detail in order_details:
                    text += f"  {order_detail.product.name}‚úñÔ∏è{order_detail.count}\n"
                    summa += order_detail.product.price * order_detail.count
                text += f"\n<b>–û–±—â–∏–π: </b>{summa}\n\n"
        await message.answer(text, reply_markup=markup)
    elif command in ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]:
        markup = await settings_keyboard()
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É üëá", reply_markup=markup)
        await state.set_state('settings')
        


@dp.message_handler(lambda message: message.text in ["üìû –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], state="settings")
async def settings(message: types.Message, state: FSMContext):
    if message.text == "üìû –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
        markup = await back_keyboard()
        user = await get_user(message.from_user.id)
        await message.answer(f"üì± –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:{user.phone}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABCxxxxxxx", reply_markup=markup)
        await state.set_state("get_number")
    elif message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        lang = await get_lang(message.from_user.id)
        markup = await user_menu(lang)
        if lang == "ru":
            await message.answer("–ü—Ä–∏–≤–µ—Ç –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Big Sushi Premium. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=markup)
        await state.set_state("get_command")


@dp.message_handler(state="get_number")
async def get_number(message:types.Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏èÔ∏è –ù–∞–∑–∞–¥":
        markup = await settings_keyboard()
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É üëá", reply_markup=markup)
        await state.set_state('settings')
    if message.text != "‚¨ÖÔ∏èÔ∏è –ù–∞–∑–∞–¥":
        if isValid(message.text):
            user = await get_user(message.from_user)
            user.phone = message.text
            user.save()
            markup = await user_menu(user.lang)
            await message.answer(text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω‚úÖ. \n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É üëá", reply_markup=markup)
            await state.set_state("get_command")    
        else:
            await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABCxxxxxxx")


@dp.message_handler(state="get_feedback", content_types=types.ContentTypes.ANY)
async def get_feedback_message(message: types.Message, state:FSMContext):
    if message.text in ["‚¨ÖÔ∏èÔ∏èÔ∏è Orqaga", "‚¨ÖÔ∏èÔ∏èÔ∏è Back", "‚¨ÖÔ∏èÔ∏èÔ∏è –ù–∞–∑–∞–¥"]:
        lang = await get_lang(message.from_user.id)
        markup = await user_menu(lang)
        if lang == "uz":
            await message.answer("Kerakli bo'limni tanlang üëá", reply_markup=markup)
        elif lang == "en":
            await message.answer("Choose the required buttonüëá", reply_markup=markup)
        elif lang == "ru":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—Éüëá", reply_markup=markup)
        await state.set_state("get_command")
    else:
        await bot.forward_message(message_id=message.id, chat_id=-1001570855404)
        # await message.forward(chat_id=-1001570855404)
        lang = await get_lang(message.from_user.id)
        markup = await user_menu(lang)
        if lang == "uz":
            await message.answer("Fikr-mulohazangiz uchun tashakkur!", reply_markup=markup)
        elif lang == "en":
            await message.answer("Thanks for your feedback!", reply_markup=markup)
        elif lang == "ru":
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", reply_markup=markup)
        await state.set_state("get_command")
        

@dp.message_handler(state="get_command_about")
async def get_command_about(message: types.Message, state: FSMContext):
    if message.text in ["‚¨ÖÔ∏èÔ∏èÔ∏è –ù–∞–∑–∞–¥"]:
        lang = await get_lang(message.from_user.id)
        markup = await user_menu(lang)
        if lang == "uz":
            await message.answer("Kerakli bo'limni tanlang üëá", reply_markup=markup)
        elif lang == "en":
            await message.answer("Choose the required buttonüëá", reply_markup=markup)
        elif lang == "ru":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—Éüëá", reply_markup=markup)
        await state.set_state("get_command")


@dp.message_handler(state="get_service_type")
async def get_command_about(message: types.Message, state: FSMContext):
    user = await get_user(message.from_id)
    lang = await get_lang(message.from_user.id)
    if message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        text = await get_carts(message.from_id)
        if text is not None:
            cart_test = await check_cart(message.from_id)
            if cart_test:
                markup = await cart_keyboard(user_id=message.from_id)
                await message.answer(text=text, reply_markup=markup, parse_mode='HTML')
            else:
                go_m = await go_order()
                markup = await back_keyboard()
                await message.answer(text, reply_markup=markup)
                await message.answer("–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏", reply_markup=go_m)
        await state.set_state("get_cart_command")
    elif message.text in ["üèÉ‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤—ã–≤–æ–∑"]:
        order_type = "pick"
        date = datetime.datetime.now()
        await state.update_data(order_type=order_type)
        order = await add_order(user_id=message.from_id, date=date)
        order.service_type = order_type
        await state.update_data(order_id=order.id)
        carts = await get_cart_objects(message.from_id)
        for cart in carts:
            await add_order_detail(order_id=order.id, product_id=cart.product.id, count=cart.count)
        order_deails = await get_order_details(order.id) 
        summa = 0
        markup = await order_confirmation(lang)
        text = f"<b>üõí–í–∞—à –∑–∞–∫–∞–∑</b>\n\nüÜî –ó–∞–∫–∞–∑: <b>#{order.id}</b>\n–¢–∏–ø –∑–∞–∫–∞–∑–∞: <b>–°–∞–º–æ–≤—ã–≤–æ–∑</b>\n"\
        f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: <b>#{order.user.user_id}</b>\n"
        for order_detail in order_deails:
            text += f"  {order_detail.product.name}‚úñÔ∏è{order_detail.count}\n"
            summa += order_detail.product.price * order_detail.count
        text += f"\n<b>–û–±—â–∞—è —Å—É–º–º–∞: </b>{summa} ‚ÇΩ"
        text += "\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ—é –µ–¥—É —á–µ—Ä–µ–∑ —Å –ú–µ—Ç—Ä–æ –û–∑—ë—Ä–Ω–∞—è, —É–ª. –ù–∏–∫—É–ª–∏–Ω—Å–∫–∞—è, 13"
        order.summa = summa
        order.save()
        await message.answer(text, reply_markup=markup)
        await state.set_state("confirm_order")
    elif message.text in ["üöö –î–æ—Å—Ç–∞–≤–∫–∞"]:
        text = await get_carts(message.from_user.id)
        order_type = "deliver"
        await state.update_data(order_type=order_type)
        lang = await get_lang(message.from_user.id)
        text = []
        if lang == 'uz':
            text = ['Yetkazish manzilini jo\'nating']
        elif lang == 'ru':
            text = ['üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã, –Ω–æ–º–µ—Ä –¥–æ–º–∞, –Ω–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞, –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ –Ω–æ–º–µ—Ä –¥–æ–º–æ—Ñ–æ–Ω–∞']
        elif lang == 'en':
            text = ['Please send your delivery address']
        markup = await location_send(lang)
        await message.answer(text=f"{text[0]} üëá", reply_markup=markup)
        await state.set_state("get_address")
    else:
        pass        


@dp.message_handler(lambda message: message.text in ["‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"], state="get_payment", content_types=types.ContentTypes.TEXT)
async def get_command_about(message: types.Message, state: FSMContext):
    lang = await get_lang(message.from_user.id)
    if message.text in ["‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"]:
        markup = await user_menu(lang)
        await message.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=markup)
        await state.set_state("get_command")
    

@dp.callback_query_handler(state="get_category")
async def get_command_about(call: types.CallbackQuery, state: FSMContext):
    lang = await get_lang(call.from_user.id)
    await call.message.delete()
    if call.data == 'back':
        markup = await user_menu(lang)
        await bot.send_message(chat_id=call.from_user.id, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=markup)
        await state.set_state("get_command")
    elif call.data == 'go_cart':
        text = await get_carts(call.from_user.id)
        if text != "‚ö†Ô∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞":
            markup = await cart_keyboard(user_id=call.from_user.id)
            await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=markup, parse_mode='HTML')
        else:
            go_m = await go_order(lang)
            markup = await back_keyboard(lang)
            await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=markup)
            await bot.send_message(chat_id=call.from_user.id, text="–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏", reply_markup=go_m)
        await state.set_state("get_cart_command")

    else:
        category = await get_category(call.data)
        markup = await product_keyboard(cat_id=call.data)
        if category.image:
            photo = open(f'.{category.ImageURL}', 'rb')
            if lang == "uz":
                await bot.send_photo(chat_id=call.from_user.id, photo=photo, caption="Kerakli taomni tanlang üëá", reply_markup=markup)
            elif lang == "en":
                await bot.send_photo(chat_id=call.from_user.id, photo=photo, caption="Choose the food you want üëá", reply_markup=markup)
            elif lang == "ru":
                await bot.send_photo(chat_id=call.from_user.id, photo=photo, caption="ƒ∞stediƒüiniz yemeƒüi se√ßin üëá", reply_markup=markup)
        else:
            if lang == "uz":
                await bot.send_message(chat_id=call.from_user.id, text="Kerakli taomni tanlang üëá", reply_markup=markup)
            elif lang == "en":
                await bot.send_message(chat_id=call.from_user.id, text="Choose the food you want üëá", reply_markup=markup)
            elif lang == "ru":
                await bot.send_message(chat_id=call.from_user.id, text="ƒ∞stediƒüiniz yemeƒüi se√ßin üëá", reply_markup=markup)
        await state.set_state("get_product")
        

@dp.callback_query_handler(state="get_product")
async def get_command_about(call: types.CallbackQuery, state: FSMContext):
    lang = await get_lang(call.from_user.id)
    await call.message.delete()
    if call.data == 'back':
        markup = await category_keyboard(user_id=call.from_user.id)
        if lang == "uz":
            await bot.send_message(chat_id=call.from_user.id, text="Kerakli kategoriyani tanlang üëá", reply_markup=markup)
        elif lang == "en":
            await bot.send_message(chat_id=call.from_user.id, text="Choose a category üëá", reply_markup=markup)
        elif lang == "ru":
            await bot.send_message(chat_id=call.from_user.id, text="ƒ∞stediƒüiniz kategoriyi se√ßin üëá", reply_markup=markup)
        # await state.update_data(order_type=order_type)
        await state.set_state("get_category")
    else:
        product = await get_product(call.data)
        user = await get_user(call.from_user.id)
        cart = await add_cart(user=user, product=product)
        await state.update_data(cart_id=cart.id)
        markup = await order_keyboard(lang=lang, cart_id=cart.id)   
        if product.image:
            photo = open(f'.{product.ImageURL}', 'rb')
            text = f"{product.name}\n\n {product.description}"
            await bot.send_photo(chat_id=call.from_user.id, photo=photo, caption=text, reply_markup=markup)
        else:
            await bot.send_message(chat_id=call.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ üëá", reply_markup=markup)
        await state.set_state("cart_state")

    
@dp.callback_query_handler(state="cart_state")
async def cart_state(call: types.CallbackQuery, state: FSMContext):
    lang = await get_lang(call.from_user.id)
    command = call.data.split('-')[0]
    cart_id = call.data.split('-')[1]
    if command == "cancel":
        cart = await get_cart(cart_id)
        await call.message.delete()
        markup = await product_keyboard(lang, cat_id=cart.product.category.id)
        category = cart.product.category
        if category.image:
            photo = open(f'.{category.ImageURL}', 'rb')
            if lang == "uz":
                await bot.send_photo(chat_id=call.from_user.id, photo=photo, caption="Kerakli taomni tanlang üëá", reply_markup=markup)
            elif lang == "en":
                await bot.send_photo(chat_id=call.from_user.id, photo=photo, caption="Choose the food you want üëá", reply_markup=markup)
            elif lang == "ru":
                await bot.send_photo(chat_id=call.from_user.id, photo=photo, caption="ƒ∞stediƒüiniz yemeƒüi se√ßin üëá", reply_markup=markup)
        else:
            if lang == "uz":
                await bot.send_message(chat_id=call.from_user.id, text="Kerakli taomni tanlang üëá", reply_markup=markup)
            elif lang == "en":
                await bot.send_message(chat_id=call.from_user.id, text="Choose the food you want üëá", reply_markup=markup)
            elif lang == "ru":
                await bot.send_message(chat_id=call.from_user.id, text="ƒ∞stediƒüiniz yemeƒüi se√ßin üëá", reply_markup=markup)
        await state.set_state("get_product")
    elif command == "cart_plus":
        cart = await get_cart(cart_id)
        cart.count += 1
        cart.save()
        markup = await order_keyboard(lang=lang, cart_id=cart.id)
        if lang == "uz":
            await call.message.edit_reply_markup(reply_markup=markup)
        elif lang == "en":
            await call.message.edit_reply_markup(reply_markup=markup)
        elif lang == "ru":
            await call.message.edit_reply_markup(reply_markup=markup)
    elif command == "cart_minus":
        cart = await get_cart(cart_id)
        if cart.count <= 1:
            cart.count = 1
        else:
            cart.count -= 1
        cart.save()
        markup = await order_keyboard(lang=lang, cart_id=cart.id)
        await call.message.edit_reply_markup(reply_markup=markup)
    elif command == "confirm":
        cart = await get_cart(cart_id)
        cart.confirm = True
        cart.save()
        await call.message.delete()
        markup = await category_keyboard(user_id=call.from_user.id)
        await bot.send_message(chat_id=call.from_user.id, text="–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá", reply_markup=markup)
        await state.set_state("get_category")
        

@dp.callback_query_handler(state="get_cart_command")
async def get_cart_query(call:types.CallbackQuery, state:FSMContext):
    lang = await get_lang(call.from_user.id)
    await call.message.delete()
    markup = await category_keyboard(user_id=call.from_user.id)
    photo = open('./MAIN.jpg', 'rb')
    await bot.send_message(chat_id=call.from_user.id, text='.', reply_markup=ReplyKeyboardRemove())
    await bot.send_photo(chat_id=call.from_user.id, photo=photo, caption="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá", reply_markup=markup)
    await state.update_data(order_type=order_type)
    await state.set_state("get_category")
    

@dp.message_handler(state="get_cart_command")
async def get_count(message: types.Message, state: FSMContext):
    lang = await get_lang(message.from_user.id)
    if message.text in ["üóë Savatchani tozalash", "üóë Clear cart", "üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"]:
        await clear_cart(message.from_id)
        markup = await user_menu(lang)
        if lang == "uz":
            await message.answer("üóë Savatcha tozalandi. Iltimos kerakli bo'limni tanlang üëá", reply_markup=markup)
        elif lang == "ru":
            await message.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ªüëá", reply_markup=markup)
        elif lang == "en":
            await message.answer("üóë Cart cleared. Please select the desired section üëá", reply_markup=markup)
        await state.set_state("get_command")
    elif message.text in ["‚¨ÖÔ∏èÔ∏è Orqaga", "‚¨ÖÔ∏èÔ∏è Back", "‚¨ÖÔ∏èÔ∏è –ù–∞–∑–∞–¥"]:
        lang = await get_lang(message.from_user.id)
        markup = await user_menu(lang)
        if lang == "uz":
            await message.answer("Kerakli bo'limni tanlang üëá", reply_markup=markup)
        elif lang == "en":
            await message.answer("Choose the required buttonüëá", reply_markup=markup)
        elif lang == "ru":
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—Éüëá", reply_markup=markup)
        await state.set_state("get_command")
    elif message.text in ["üõí Buyurtmani rasmiylashtirish", "üõí Complete order", "üõí –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑"]:
        markup = await order_type()
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏", reply_markup=markup)
        await state.set_state("get_service_type")
    else:
        product_name = message.text.split("‚ùå ")
        try:
            product = await get_product_by_name(product_name[1])
        except:
            pass
        if product is not None:
            await delete_cart_item(product=product, user_id=message.from_user.id)
            text = await get_carts(message.from_id)
            markup = await user_menu(lang)
            if text is not None:
                markup = await cart_keyboard(user_id=message.from_id)
                await message.answer(text=text, reply_markup=markup, parse_mode='HTML')
                await state.set_state("get_cart_command")
            else:
                if lang == "uz":
                    await message.answer("‚ùå Savatchangiz bo'sh. Iltimos kerakli bo'limni tanlang üëá", reply_markup=markup)
                elif lang == "ru":
                    await message.answer("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ªüëá", reply_markup=markup)
                elif lang == "en":
                    await message.answer("‚ùå Your shopping cart is empty. Please select the desired section üëá", reply_markup=markup)
                await state.set_state("get_command")



# @dp.message_handler(content_types=types.ContentType.LOCATION, state='get_address')
# async def get_location_address(message: types.Message, state: FSMContext):
#     location = message.location
#     geolocator = Nominatim(user_agent="geoapiExercises")
#     Latitude = str(location.latitude)
#     Longitude = str(location.longitude)
#     location = geolocator.geocode(Latitude + "," + Longitude)
#     data = location.raw.get('display_name')
#     data = data.split(',')
#     name = f"{data[0]} {data[1]} {data[2]}"
#     user = await get_user(message.from_user.id)
#     lang = user.lang
#     text = []
#     if lang == 'uz':
#         text = 'üî∞ Manzilni tasdiqlaysizmi?'
#     elif lang == 'ru':
#         text = 'üî∞ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∞–¥—Ä–µ—Å?'
#     elif lang == 'en':
#         text = 'üî∞ Do you confirm the location?'
#     await state.update_data(latitude=Latitude, longitude=Longitude, name=name,
#                             display_name=location.raw.get('display_name'))
#     await message.answer(text=location.raw.get('display_name'), reply_markup=ReplyKeyboardRemove())
#     markup = await confirm_address(lang)
#     await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)
#     await state.set_state('confirm_address')


@dp.message_handler(content_types=types.ContentType.TEXT, state='get_address')
async def get_loc(message: types.Message, state: FSMContext):
    lang = await get_lang(message.from_id)
    command = message.text
    if command == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        text = await get_carts(message.from_id)
        if text is not None:
            cart_test = await check_cart(message.from_id)
            if cart_test:
                markup = await cart_keyboard(user_id=message.from_id)
                await message.answer(text=text, reply_markup=markup, parse_mode='HTML')
            else:
                go_m = await go_order()
                markup = await back_keyboard()
                await message.answer(text, reply_markup=markup)
                await message.answer("–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏", reply_markup=go_m)
        await state.set_state("get_cart_command")
    elif command == 'üîÇ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–¥—Ä–µ—Å–∞':
        locations = await get_address(message.from_user.id)
        if locations:
            user = await get_user(message.from_user.id)
            lang = user.lang
            text = []
            if lang == 'uz':
                text = ['Kerakli mazilni tanlang', 'Manzillar']
            elif lang == 'ru':
                text = ['–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ', '–ê–¥—Ä–µ—Å–∞']
            elif lang == 'en':
                text = ['Choose the desired mazil', 'Addresses']
            markup = await location_keys(user_id=message.from_user.id, lang=lang)
            await message.answer(text=text[1], reply_markup=ReplyKeyboardRemove())
            await bot.send_message(text=text[0], chat_id=message.from_user.id, reply_markup=markup)
            await state.set_state('get_location')
        elif command != 'üîÇ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–¥—Ä–µ—Å–∞' and message.text !="‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            user = await get_user(message.from_user.id)
            lang = user.lang
            text = []
            if lang == 'uz':
                text = 'üóë Manzillar ro\'yxati bo\'sh'
            elif lang == 'ru':
                text = 'üóë –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø—É—Å—Ç–æ–π'
            elif lang == 'en':
                text = 'üóë The address list is empty'
            await message.answer(text)
    else:
        text = 'üî∞ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∞–¥—Ä–µ—Å?'
        await state.update_data(location_name=message.text)
        await message.answer(text=message.text, reply_markup=ReplyKeyboardRemove())
        markup = await confirm_address(lang)
        await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)
        await state.set_state('confirm_address')

        
@dp.message_handler(content_types=types.ContentType.TEXT, state='get_location')
async def get_loc(message: types.Message, state: FSMContext):
    lang = await get_lang(message.from_id)
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        lang = await get_lang(message.from_user.id)
        text = ['Yetkazish manzilini jo\'nating']
        markup = await location_send(lang)
        await message.answer(text=f"{text[0]} üëá", reply_markup=markup)
        await state.set_state("get_address")
    else: 
        location = await get_location_by_name(name=message.text, user_id=message.from_id)
        if location is not None:
            name = location.name
            user = await get_user(message.from_user.id)
            lang = user.lang
            text = []
            if lang == 'uz':
                text = 'üî∞ Manzilni tasdiqlaysizmi?'
            elif lang == 'ru':
                text = 'üî∞ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∞–¥—Ä–µ—Å?'
            elif lang == 'en':
                text = 'üî∞ Do you confirm the location?'
            await state.update_data(location_name=name)
            await message.answer(text=name, reply_markup=ReplyKeyboardRemove())
            markup = await confirm_address(lang)
            await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)
            await state.set_state('confirm_address')

@dp.message_handler(content_types=types.ContentType.TEXT, state='confirm_address')
async def get_loc(message: types.Message, state: FSMContext):
    lang = await get_lang(message.from_id)
    if message.text in ["‚¨ÖÔ∏èÔ∏è Orqaga", "‚¨ÖÔ∏èÔ∏è Back", "‚¨ÖÔ∏èÔ∏è –ù–∞–∑–∞–¥"]:
        markup = await pay_method(lang)
        if lang == "uz":
            await message.answer("Iltimos to'lov usulini tanlang üëá", reply_markup=markup)
        elif lang == "en":
            await message.answer("Please select a payment method üëá", reply_markup=markup)
        elif lang == "ru":
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã üëá", reply_markup=markup)
        await state.set_state("get_payment_method")
    elif message.text in ["‚úÖ Tasdiqlash", "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úÖ Confirm"]:
        data = await state.get_data()
        user = await get_user(message.from_user.id)
        location_name = data['location_name']
        order_type = data['order_type']
        date = datetime.datetime.now()
        order = await add_order(user_id=message.from_id, date=date, address= location_name)
        await state.update_data(order_id=order.id)
        order.address = location_name
        carts = await get_cart_objects(message.from_id)
        for cart in carts:
            await add_order_detail(order_id=order.id, product_id=cart.product.id, count=cart.count)
        order_deails = await get_order_details(order.id) 
        summa = 0
        await add_address(user_id=message.from_user.id, name=location_name)
        markup = await order_confirmation(lang)
        text = f"<b>üõí–í–∞—à –∑–∞–∫–∞–∑</b>\n\nüÜî –ó–∞–∫–∞–∑: <b>#{order.id}</b>\n"\
        f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: <b>#{order.user.user_id}</b>\nüìç –ê–¥—Ä–µ—Å: {order.address}\n"
        for order_detail in order_deails:
            text += f"  {order_detail.product.name}‚úñÔ∏è{order_detail.count}\n"
            summa += order_detail.product.price * order_detail.count
        text += f"\n<b>–û–±—â–∏–π: </b>{summa}"
        order.summa = summa
        order.service_type = order_type
        order.save()
        await message.answer(text, reply_markup=markup)
        await state.set_state("confirm_order")
    elif message.text in ["üîÑ Qayta jo\'natish", "üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ", "üîÑ Send again"]:
        lang = await get_lang(message.from_user.id)
        text = []
        if lang == 'uz':
            text = ['Yetkazish manzilini jo\'nating']
        elif lang == 'ru':
            text = ['–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏']
        elif lang == 'en':
            text = ['Please send your delivery address']
        markup = await location_send(lang)
        await message.answer(text=f"{text[0]} üëá", reply_markup=markup)
        await state.set_state("get_address")


@dp.message_handler(content_types=types.ContentType.TEXT, state='confirm_order')
async def get_loc(message: types.Message, state: FSMContext):
    lang = await get_lang(message.from_id)
    data = await state.get_data()
    # card_type = data["card_type"]
    if message.text in ["‚ùå Bekor qilish", "‚ùå Cancel", "‚ùå –û—Ç–º–µ–Ω–∞"]:
        await clear_cart(message.from_id)
        order_id = data['order_id']
        order = await get_order(order_id)
        order.delete()
        markup = await user_menu(lang)
        if lang == "uz":
            await message.answer("üóë Savatcha tozalandi. Iltimos kerakli bo'limni tanlang üëá", reply_markup=markup)
        elif lang == "ru":
            await message.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ªüëá", reply_markup=markup)
        elif lang == "en":
            await message.answer("üóë Cart cleared. Please select the desired section üëá", reply_markup=markup)
        await state.set_state("get_command")
    elif message.text in ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", "‚úÖ Buyurtmani tasdiqlash", "‚úÖ Confirm order"]:
        text = await get_carts(message.from_user.id)
        data = await state.get_data()
        order_id = data['order_id'] 
        order = await get_order(order_id)
        order_details = await get_order_details(order_id)
        if order.service_type == "deliver":
            markup = await cancel_order()
            await message.answer(text=text + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã \n<b>2202206269993650</b>", reply_markup=markup)
            await state.update_data(order_type=order_type)
            await state.set_state("get_payment")
        if order.service_type == 'pick':
            summa = 0
            await clear_cart(message.from_user.id)
            text = f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: <b>#{order.user.user_id}</b>\nüìû T–µ–ª–µ—Ñ–æ–Ω: <b>+{order.user.phone}</b>\n–¢–∏–ø –∑–∞–∫–∞–∑–∞: <b>–°–∞–º–æ–≤—ã–≤–æ–∑</b>\n"
            markup = await confirm_payment(order_id)
            for order_detail in order_details:
                text += f"  {order_detail.product.name}‚úñÔ∏è{order_detail.count}\n"
                summa += order_detail.product.price * order_detail.count
            text += f"\n<b>–û–±—â–∞—è —Å—É–º–º–∞: </b>{summa} ‚ÇΩ"    
            await bot.send_message(chat_id=-883764749, text=text, reply_markup=markup)
            markup = await user_menu("ru")
            
            await message.answer(text="–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
            await message.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=markup)
            await state.set_state("get_command")


@dp.message_handler(state="get_payment", content_types=types.ContentTypes.PHOTO)
async def get_payment_confirm(message: types.Message, state: FSMContext):
    photo = message.photo[-1].file_id
    data = await state.get_data()
    await clear_cart(message.from_user.id)
    order_id = data['order_id']
    markup = await confirm_payment(order_id)
    order = await get_order(order_id)
    order_details = await get_order_details(order_id)
    summa = 0
    text = f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: <b>#{order.user.user_id}</b>\nüìû T–µ–ª–µ—Ñ–æ–Ω: <b>+{order.user.phone}</b>\nüìç –ê–¥—Ä–µ—Å: {order.address}\n"
    for order_detail in order_details:
        text += f"  {order_detail.product.name}‚úñÔ∏è{order_detail.count}\n"
        summa += order_detail.product.price * order_detail.count
    text += f"\n<b>–û–±—â–∞—è —Å—É–º–º–∞: </b>{summa} ‚ÇΩ"    
    await bot.send_photo(chat_id=-883764749, photo=photo, caption=text, reply_markup=markup)
    markup = await user_menu("ru")
    
    await message.answer(text="–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
    await message.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá", reply_markup=markup)
    await state.set_state("get_command")

